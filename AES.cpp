#include<bits/stdc++.h>
using namespace std;
unsigned char sBox[256] =   {

0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 
}; 

unsigned char rcon[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};


unsigned char* RotWord(unsigned char *t){
    unsigned char temp=t[0];
    for(int i=0;i<3;i++){
        t[i]=t[i+1];
    }
    t[3]=temp;
    return t;
}
unsigned char* SubWord(unsigned char *t){
    for(int i=0;i<4;i++){
        t[i]=sBox[t[i]];
    }
    return t;
}
void key_schedule(unsigned char *t,int xi1){
    t=RotWord(t);
    t=SubWord(t);
    t[0]=t[0]^rcon[xi1]; //
}
void expansionbox(unsigned char* key,unsigned char* expanded_key,int key_size,int expanded_key_size){
    int curr_size=0;
    int rcon_i=1;
    //unsigned char* t[4];
    unsigned char t[4];
    for(int i=0;i<key_size;i++){
        expanded_key[i]=key[i];
        curr_size++;
    }
    while(curr_size<expanded_key_size){
        for(int i=0;i<4;i++){
            t[i]=expanded_key[curr_size-4+i];
        }
        //try not giving the lower condition
        if(expanded_key_size%key_size==0){
            key_schedule(t,rcon_i);
            rcon_i++;
        }
        for(int i=0;i<4;i++){
            expanded_key[curr_size+i]=expanded_key[curr_size-key_size+i]^t[i];
        }
        curr_size=curr_size+4;
        /*for(int i = 0; i < 4; ++i){
			//for each byte in the expanded key, store the value of the current expanded key byte - the size of the initial key
			// XOR'd with t
			expanded_key[current_size_of_key] = expanded_key[(current_size_of_key - key_size)] ^ t[i];
			current_size_of_key++;
		}*/
    }
}
void setState(unsigned char* plaintext,unsigned char** state){
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            state[j][i]=plaintext[4*i+j];
        }
    }
}
void CreateRoundKey(unsigned char* expanded_key,unsigned char** round_key,int round){
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            round_key[j][i]=expanded_key[16*round+4*i+j]; 
        }
    }
}
void AddRoundKey(unsigned char **state, unsigned char **round_key){
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            state[i][j]^=round_key[i][j];
        }
    }
}
void SubBytes(unsigned char **state){
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            state[i][j]=sBox[state[i][j]];
        }
    }
}
void ShiftRows(unsigned char **state){
    unsigned char temp;

    temp=state[1][0];
    state[1][1]=state[1][1];
    state[1][2]=state[1][2];
    state[1][3]=state[1][3];

    state[2][0]=state[2][2];
    state[2][2]=temp;
    temp=state[2][1];
    state[2][1]=state[2][3];
    state[2][3]=temp;

    temp=state[3][3];
    state[3][3]=state[3][2];
    state[3][2]=state[3][1];
    state[3][1]=state[3][0];
    state[3][0]=temp;
    //check
}
void mix_single_column(unsigned char *r){
    unsigned char a[4],b[4];
    unsigned char c,h;
    for(c=0;c<4;c++){
        a[c]=r[c];
        h=(unsigned char)((signed char)r[c]>>7);//for msb=1 -1 and msb=0 all 0
        b[c]=r[c]<<1;//multiply by 2
        b[c]^=0x1B & h;//m(x) = x⁸ + x⁴ + x³ + x + 1 = 0x11B
    }
    r[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1]; // 2 * a0 + a3 + a2 + 3 * a1 
    r[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2]; // 2 * a1 + a0 + a3 + 3 * a2
    r[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3]; // 2 * a2 + a1 + a0 + 3 * a3
    r[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0]; // 2 * a3 + a2 + a1 + 3 * a0
}
void MixColumns(unsigned char ** state){
    unsigned char* temp=new unsigned char[4];//sto store a single column
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            temp[j]=state[j][i];
        }
        mix_single_column(temp);
        for(int j=0;j<4;j++){
            state[j][i]=temp[j];
        }
    }
    delete[] temp;
}
void ActualOutput(unsigned char *ciphertext,unsigned char **state){
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            ciphertext[i*4+j]=state[j][i];
        }
    }
}
int main(){
    unsigned char *key,*ciphertext;
    key=new unsigned char[16];
    ciphertext=new unsigned char[16];
    //check with strcpy
    char block[16];
    cout<<"Enter plaintext of 16 characters each corresponding to 1 byte"<<endl;
    //cin.ignore();
    //getlin(cin,plaintext);// getline takes char* not unsigned chae*
    cin.read(block,16);//key is provided separately in real AES
    //cin.read() works with char*, but the pointer must point to at least n valid writable bytes.Here plaintext is pointing to null so block is needed
    for(int i=0;i<16;i++){
        key[i]= block[i];
    }
    unsigned char expanded_key[176];
    expansionbox(key,expanded_key,16,176);

    //later try these with vector
    unsigned char **state, **round_key;
    state=new unsigned char*[4];
    round_key=new unsigned char*[4];
    for(int i=0;i<4;i++){
        state[i]=new unsigned char[4];
        round_key[i]=new unsigned char[4];
    }
    unsigned char *plaintext16;
    plaintext16=new unsigned char[16];
    while(cin.read(block,16)){
        //char can hold values from -128 to 127 and cin Expects a char* (signed or unsigned, but typically treated as signed char)
        for(int i=0;i<16;i++){
            plaintext16[i]=(unsigned char)block[i];
        }
        setState(plaintext16,state);
        CreateRoundKey(expanded_key,round_key,0);
        AddRoundKey(state,round_key);
        for(int round=1;round<10;round++){
            CreateRoundKey(expanded_key,round_key,round);
            SubBytes(state);
            ShiftRows(state);
            MixColumns(state);
            AddRoundKey(state,round_key);
        }
        CreateRoundKey(expanded_key,round_key,10);
        SubBytes(state);
        ShiftRows(state);
        AddRoundKey(state,round_key);
        ActualOutput(ciphertext,state);
        //instead of ciphertext we can/should directly change plaintext
        cout<<"Plaintext"<<endl;
        for(int i=0;i<16;i++){
            cout<<plaintext16[i];
        }
        cout<<endl;
        cout<<"Ciphertext"<<endl;
        for(int i=0;i<16;i++){
            cout<<ciphertext[i];
        }
        cout<<endl;
    }
}